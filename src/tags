!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
BaseState	State/BaseState.hpp	/^  BaseState(Game* game):$/;"	f	class:BaseState
BaseState	State/BaseState.hpp	/^class BaseState $/;"	c
Button	GUI/Button.cpp	/^  Button::Button():$/;"	f	class:GUI::Button
Button	GUI/Button.hpp	/^class Button : public Widget$/;"	c	namespace:GUI
CenterStackWidget	GUI/CenterStackWidget.cpp	/^CenterStackWidget::CenterStackWidget(sf::RenderWindow* window):$/;"	f	class:GUI::CenterStackWidget
CenterStackWidget	GUI/CenterStackWidget.hpp	/^class CenterStackWidget$/;"	c	namespace:GUI
DefaultState	State/DefaultState.cpp	/^DefaultState::DefaultState(Game* game):$/;"	f	class:DefaultState
DefaultState	State/DefaultState.hpp	/^class DefaultState : public BaseState$/;"	c
GUI	GUI/Button.cpp	/^namespace GUI$/;"	n	file:
GUI	GUI/Button.hpp	/^namespace GUI$/;"	n
GUI	GUI/CenterStackWidget.cpp	/^namespace GUI$/;"	n	file:
GUI	GUI/CenterStackWidget.hpp	/^namespace GUI$/;"	n
GUI	GUI/Widget.hpp	/^namespace GUI$/;"	n
Game	Game.cpp	/^Game::Game():$/;"	f	class:Game
Game	Game.hpp	/^class Game $/;"	c
Widget	GUI/Widget.hpp	/^  Widget(std::string type):$/;"	f	class:GUI::Widget
Widget	GUI/Widget.hpp	/^class Widget $/;"	c	namespace:GUI
_BASE_STATE_H_	State/BaseState.hpp	/^#define _BASE_STATE_H_ /;"	d
_BUTTON_H_	GUI/Button.hpp	/^#define _BUTTON_H_ /;"	d
_CENTER_STACK_WIDGETS_H_	GUI/CenterStackWidget.hpp	/^#define _CENTER_STACK_WIDGETS_H_ /;"	d
_DEFAULT_STATE_H_	State/DefaultState.hpp	/^#define _DEFAULT_STATE_H_ /;"	d
_GAME_HPP_	Game.hpp	/^#define _GAME_HPP_ /;"	d
_WIDGET_H_	GUI/Widget.hpp	/^#define _WIDGET_H_ /;"	d
addWidget	GUI/CenterStackWidget.cpp	/^void CenterStackWidget::addWidget()$/;"	f	class:GUI::CenterStackWidget	typeref:typename:void
calculatePositions	GUI/CenterStackWidget.cpp	/^void CenterStackWidget::calculatePositions()$/;"	f	class:GUI::CenterStackWidget	typeref:typename:void
exitGame	Game.cpp	/^void Game::exitGame()$/;"	f	class:Game	typeref:typename:void
getPosition	GUI/Button.cpp	/^  sf::Vector2f Button::getPosition()$/;"	f	class:GUI::Button	typeref:typename:sf::Vector2f
getSize	GUI/Button.cpp	/^  sf::Vector2f Button::getSize()$/;"	f	class:GUI::Button	typeref:typename:sf::Vector2f
getType	GUI/Button.cpp	/^  std::string Button::getType()$/;"	f	class:GUI::Button	typeref:typename:std::string
getWindow	Game.cpp	/^sf::RenderWindow* Game::getWindow()$/;"	f	class:Game	typeref:typename:sf::RenderWindow *
handleEvent	Game.cpp	/^void Game::handleEvent()$/;"	f	class:Game	typeref:typename:void
handleEvents	GUI/Button.cpp	/^  void Button::handleEvents(sf::Event e)$/;"	f	class:GUI::Button	typeref:typename:void
handleEvents	GUI/CenterStackWidget.cpp	/^void CenterStackWidget::handleEvents()$/;"	f	class:GUI::CenterStackWidget	typeref:typename:void
handleEvents	State/BaseState.hpp	/^  virtual void handleEvents(sf::Event e)                {}$/;"	f	class:BaseState	typeref:typename:void
handleEvents	State/DefaultState.cpp	/^void DefaultState::handleEvents(sf::Event e)$/;"	f	class:DefaultState	typeref:typename:void
handleInput	State/DefaultState.cpp	/^void DefaultState::handleInput()$/;"	f	class:DefaultState	typeref:typename:void
isClicked	GUI/Button.cpp	/^  void Button::isClicked()$/;"	f	class:GUI::Button	typeref:typename:void
isHovering	GUI/Button.cpp	/^  void Button::isHovering()$/;"	f	class:GUI::Button	typeref:typename:void
m_button	GUI/Button.hpp	/^  sf::RectangleShape m_button;$/;"	m	class:GUI::Button	typeref:typename:sf::RectangleShape
m_circle	State/DefaultState.hpp	/^  sf::CircleShape m_circle;$/;"	m	class:DefaultState	typeref:typename:sf::CircleShape
m_circle_pos	State/DefaultState.hpp	/^  sf::Vector2f    m_circle_pos;$/;"	m	class:DefaultState	typeref:typename:sf::Vector2f
m_popStack	Game.hpp	/^    bool m_popStack = false;$/;"	m	class:Game	typeref:typename:bool
m_quit	Game.hpp	/^    bool m_quit     = false;$/;"	m	class:Game	typeref:typename:bool
m_stack	State/DefaultState.hpp	/^  GUI::CenterStackWidget m_stack;$/;"	m	class:DefaultState	typeref:typename:GUI::CenterStackWidget
m_state_stack	Game.hpp	/^    std::stack<BaseState*> m_state_stack;$/;"	m	class:Game	typeref:typename:std::stack<BaseState * >
m_widget_type	GUI/Widget.hpp	/^  std::string  m_widget_type;$/;"	m	class:GUI::Widget	typeref:typename:std::string
m_window	Game.hpp	/^    sf::RenderWindow* m_window;$/;"	m	class:Game	typeref:typename:sf::RenderWindow *
p_game	State/BaseState.hpp	/^  Game* p_game;$/;"	m	class:BaseState	typeref:typename:Game *
p_widget_vector	GUI/CenterStackWidget.hpp	/^  std::vector<Widget*> p_widget_vector;$/;"	m	class:GUI::CenterStackWidget	typeref:typename:std::vector<Widget * >
p_window	GUI/CenterStackWidget.hpp	/^  sf::RenderWindow*    p_window;$/;"	m	class:GUI::CenterStackWidget	typeref:typename:sf::RenderWindow *
popStack	Game.cpp	/^void Game::popStack()$/;"	f	class:Game	typeref:typename:void
pushStack	Game.cpp	/^void Game::pushStack()$/;"	f	class:Game	typeref:typename:void
render	GUI/Button.cpp	/^  void Button::render(sf::RenderTarget* renderer)$/;"	f	class:GUI::Button	typeref:typename:void
render	GUI/CenterStackWidget.cpp	/^void CenterStackWidget::render(sf::RenderTarget* renderer)$/;"	f	class:GUI::CenterStackWidget	typeref:typename:void
renderState	State/DefaultState.cpp	/^void DefaultState::renderState(sf::RenderTarget* renderer)$/;"	f	class:DefaultState	typeref:typename:void
run	Game.cpp	/^void Game::run()$/;"	f	class:Game	typeref:typename:void
setPopStack	Game.cpp	/^void Game::setPopStack()$/;"	f	class:Game	typeref:typename:void
setPosition	GUI/Button.cpp	/^  void Button::setPosition(sf::Vector2f& position)$/;"	f	class:GUI::Button	typeref:typename:void
setSize	GUI/Button.cpp	/^  void Button::setSize(sf::Vector2f size)$/;"	f	class:GUI::Button	typeref:typename:void
setTitle	GUI/CenterStackWidget.cpp	/^void CenterStackWidget::setTitle(const std::string& title)$/;"	f	class:GUI::CenterStackWidget	typeref:typename:void
uint	GUI/CenterStackWidget.hpp	/^typedef unsigned int uint; $/;"	t	typeref:typename:unsigned int
update	GUI/CenterStackWidget.cpp	/^void CenterStackWidget::update()$/;"	f	class:GUI::CenterStackWidget	typeref:typename:void
updateState	State/BaseState.hpp	/^  virtual void updateState(sf::Time delta_time)         {}$/;"	f	class:BaseState	typeref:typename:void
updateState	State/DefaultState.cpp	/^void DefaultState::updateState(sf::Time delta_time)$/;"	f	class:DefaultState	typeref:typename:void
~Button	GUI/Button.cpp	/^  Button::~Button()$/;"	f	class:GUI::Button
~CenterStackWidget	GUI/CenterStackWidget.cpp	/^CenterStackWidget::~CenterStackWidget()$/;"	f	class:GUI::CenterStackWidget
~DefaultState	State/DefaultState.cpp	/^DefaultState::~DefaultState()$/;"	f	class:DefaultState
~Game	Game.cpp	/^Game::~Game()$/;"	f	class:Game
